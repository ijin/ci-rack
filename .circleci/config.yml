version: 2
jobs:
  build:
    docker: &defaults
       - image: docker:17.06.2-ce-git
         environment:
           COMPOSE_YML: docker-compose.yml
           CACHE_YML: docker-compose.cache.yml
           DOCKER_IMAGE: cirack_app
    working_directory: ~/ci-rack
    steps:
      - checkout
      - setup_remote_docker
#      - restore_cache:
#          keys:
#            -  v1-images-{{ .Branch }}
#      - run:
#          name: Load Docker images back from cache
#          command: |
#            set +o pipefail
#            docker load -i /cache/app.tar | true
#      - run: docker images
      - run:
          name: Install docker-compose & awscli
          command: |
            apk add --no-cache py-pip
            pip install docker-compose==1.17.1 awscli awscli
      - run:
          name: docker-compose pull
          command: docker-compose -f $COMPOSE_YML -f $CACHE_YML pull
      # TODO: confirm multiple builds
      - run:
          name: docker-compose build
          command: |
            docker-compose -f $COMPOSE_YML -f $CACHE_YML build \
                           --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                           --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                           app
#      - run: docker images
#      - run:
#          name: Save Docker images
#          command: |
#            mkdir -p /cache
#            docker save -o /cache/app.tar cirack_app
#      - run: ls -alh /cache/
#      - save_cache:
#          key: v1-images-{{ .Branch }}-{{ epoch }}
#          paths:
#            - /cache/app.tar
      - run:
          name: Install ecspresso
          command: |
            apk update #&& add ca-certificates && update-ca-certificates
            apk add --no-cache curl curl-dev bash
            curl -L https://github.com/kayac/ecspresso/releases/download/v0.3.3/ecspresso-v0.3.3-linux-amd64 -o ecs/ecspresso
            chmod +x ecs/ecspresso
#      - persist_to_workspace:
#          root: ~/ci-rack
#          paths: ./*

      # test  
      - run:
          name: Run tests
          command: echo "test"

      # deploy (without workflows)
      - run:
          name: deploy
          shell: /bin/bash
          command: |
            # for autodeployments...call deploy
            # if ecs service does not exist, create
            set -e
            cd ecs
            shopt -s extglob
            case "$CIRCLE_BRANCH" in
              master)
                ./ecs_push_deploy_notify.sh config.yml;;
              release/staging)
                ./ecs_push_deploy_notify.sh staging.yml;;
              feature/+([a-z0-9-_]))
                export FEATURE=${CIRCLE_BRANCH##*/}
                sed -i -e "s/service:.*/service: ${FEATURE}/" feature.yml
                ll
                ./ecs_push_deploy_notify.sh feature.yml;;
              !(1)) #debug
                ./ecs_push_deploy_notify.sh config.yml
            esac
            shopt -u extglob

  # triggered via api call?
  deployment:
    docker: *defaults
    working_directory: ~/ci-rack
    steps:
      - attach_workspace:
          at: ~/ci-rack
      - run:
          name: Deploy
          command: echo "test"

